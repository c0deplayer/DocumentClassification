services:
  database:
    container_name: database_service
    image: postgres:latest
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 120s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: document_classification
      TZ: Europe/Warsaw
    ports:
      - "5432:5432"
    networks:
      - document-classification
    volumes:
      - type: bind
        source: logs
        target: /app/data/logs
      - type: volume
        source: db
        target: /var/lib/postgresql/data
      - type: bind
        source: ./db/init.sql
        target: /docker-entrypoint-initdb.d/create_tables.sql

  web:
      container_name: web_interface
      build:
        context: .
        dockerfile: Dockerfile.web
      environment:
        FLASK_APP: app.py
        FLASK_ENV: development
        FLASK_DEBUG: 1
      ports:
        - "5050:5050"
      networks:
        - document-classification
      depends_on:
        - database
      volumes:
        - type: bind
          source: logs
          target: /app/data/logs
        - type: volume
          source: file_storage
          target: /app/data/uploads

  ocr:
    container_name: ocr_service
    # image: c0deplayer/dc-ocr:main
    build:
      dockerfile: Dockerfile.ocr
    environment:
      TZ: Europe/Warsaw
    ports:
      - "8080:8080"
    networks:
      - document-classification
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - type: bind
        source: logs
        target: /app/data/logs
      - type: bind
        source: models
        target: /app/data/models
      - type: volume
        source: file_storage
        target: /app/data/uploads
      - type: bind
        source: ./watch
        target: /app/data/watch

  processor:
    container_name: processor_service
    # image: c0deplayer/dc-processor:main
    build:
      dockerfile: Dockerfile.processor
    environment:
      TZ: Europe/Warsaw
    ports:
      - "9090:9090"
    networks:
      - document-classification
    depends_on:
      - ocr
    volumes:
      - type: bind
        source: logs
        target: /app/data/logs
      - type: bind
        source: models
        target: /app/data/models

  predictor:
    container_name: predictor_service
    # image: c0deplayer/dc-predictor:main
    build:
      dockerfile: Dockerfile.predictor
    environment:
      TZ: Europe/Warsaw
    ports:
      - "7070:7070"
    networks:
      - document-classification
    depends_on:
      - processor
      - database
      - ollama
    volumes:
      - type: bind
        source: logs
        target: /app/data/logs
      - type: bind
        source: models
        target: /app/data/models

  ollama:
    image: ollama/ollama:latest
    container_name: ollama_service
    restart: unless-stopped
    pull_policy: always
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    ports:
      - "11434:11434"
    volumes:
      - type: volume
        source: ollama_data
        target: /root/.ollama
      - type: bind
        source: init-ollama.sh
        target: /app/init-ollama.sh
    healthcheck:
      test: "ollama --version && ollama ps || exit 1"
      interval: 120s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - document-classification
    entrypoint: ["/usr/bin/bash", "/app/init-ollama.sh"]

  summarizer:
    container_name: summarizer_service
    # image: c0deplayer/dc-summarizer:main
    build:
      dockerfile: Dockerfile.summarizer
    environment:
      TZ: Europe/Warsaw
    ports:
      - "6060:6060"
    networks:
      - document-classification
    depends_on:
      - ollama
      - database
      - predictor
    volumes:
      - type: bind
        source: logs
        target: /app/data/logs

volumes:
  db:
    driver: local
  file_storage:
    driver: local
  ollama_data:
    driver: local

networks:
  document-classification:
    driver: bridge
