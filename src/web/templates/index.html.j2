{% extends "base.html.j2" %}

{% block title %}Documents{% endblock %}

{% block content %}
<h1>Documents</h1>

<div class="mb-4">
    <form method="get" class="mb-3" id="filterForm">
        <!-- Preserve sort parameters if set -->
        {% if current_sort %}
        <input type="hidden" name="sort" value="{{ current_sort }}">
        <input type="hidden" name="direction" value="{{ current_direction }}">
        {% endif %}

        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Filter Categories</h5>
                <div>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="selectAll">Select All</button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="clearAll">Clear All</button>
                    <button type="submit" class="btn btn-primary btn-sm">Apply Filters</button>
                </div>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    {% for category in all_categories %}
                    <div class="col-auto">
                        <div class="form-check">
                            <input class="form-check-input category-checkbox mx-1" type="checkbox" name="category"
                                value="{{ category }}" id="cat_{{ loop.index }}" {% if category in selected_categories
                                %}checked{% endif %}>
                            <label class="form-check-label" for="cat_{{ loop.index }}">
                                {{ category }}
                            </label>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </form>
</div>

<div class="mb-4">
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#uploadModal">
        <i class="bi bi-upload"></i> Upload Document
    </button>
</div>


<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th>
                    <div class="d-flex align-items-center">
                        <a href="{{ url_for('index', 
                           sort='file_name', 
                           direction='asc' if current_sort != 'file_name' else ('desc' if current_direction == 'asc' else None)) }}"
                            class="text-decoration-none text-dark">
                            File Name
                            {% if current_sort == 'file_name' %}
                            {% if current_direction == 'asc' %}
                            <i class="bi bi-sort-up"></i>
                            {% elif current_direction == 'desc' %}
                            <i class="bi bi-sort-down"></i>
                            {% endif %}
                            {% else %}
                            <i class="bi bi-arrow-down-up text-muted"></i>
                            {% endif %}
                        </a>
                    </div>
                </th>
                <th>
                    <div class="d-flex align-items-center">
                        <a href="{{ url_for('index', 
                           sort='classification', 
                           direction='asc' if current_sort != 'classification' else ('desc' if current_direction == 'asc' else None)) }}"
                            class="text-decoration-none text-dark">
                            Classification
                            {% if current_sort == 'classification' %}
                            {% if current_direction == 'asc' %}
                            <i class="bi bi-sort-up"></i>
                            {% elif current_direction == 'desc' %}
                            <i class="bi bi-sort-down"></i>
                            {% endif %}
                            {% else %}
                            <i class="bi bi-arrow-down-up text-muted"></i>
                            {% endif %}
                        </a>
                    </div>
                </th>
                <th class="col-3">
                    <div class="d-flex align-items-center">
                        <a href="{{ url_for('index', 
                           sort='summary', 
                           direction='asc' if current_sort != 'summary' else ('desc' if current_direction == 'asc' else None)) }}"
                            class="text-decoration-none text-dark">
                            Summary
                            {% if current_sort == 'summary' %}
                            {% if current_direction == 'asc' %}
                            <i class="bi bi-sort-up"></i>
                            {% elif current_direction == 'desc' %}
                            <i class="bi bi-sort-down"></i>
                            {% endif %}
                            {% else %}
                            <i class="bi bi-arrow-down-up text-muted"></i>
                            {% endif %}
                        </a>
                    </div>
                </th>
                <th>
                    <div class="d-flex align-items-center">
                        <a href="{{ url_for('index', 
                   sort='created_at', 
                   direction=(
                       'asc' if current_sort != 'created_at' or current_direction == 'desc' 
                       else (None if current_direction == 'asc' else 'asc')
                   )) }}" class="text-decoration-none text-dark">
                            Created At
                            {% if current_sort == 'created_at' %}
                            {% if current_direction == 'asc' %}
                            <i class="bi bi-sort-up"></i>
                            {% elif current_direction == 'desc' %}
                            <i class="bi bi-sort-down"></i>
                            {% endif %}
                            {% else %}
                            <i class="bi bi-arrow-down-up text-muted"></i>
                            {% endif %}
                        </a>
                    </div>
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for document in documents %}
            <tr>
                <td>{{ document.file_name.rsplit('.', 1)[0] }}</td>
                <td>{{ document.classification or 'Not classified' }}</td>
                <td class="text-truncate summary-cell" data-bs-toggle="popover" data-bs-trigger="hover"
                    data-bs-content="{{ document.summary or 'No summary' }}" style="max-width: 200px; cursor: help;">
                    {{ document.summary or 'No summary' }}
                </td>
                <td>{{ document.created_at.strftime('%Y-%m-%d %H:%M:%S') }}</td>
                <td>
                    <a href="{{ url_for('edit_document', document_id=document.id) }}"
                        class="btn btn-primary btn-sm">Edit</a>
                    <a href="{{ url_for('download_document', document_id=document.id) }}"
                        class="btn btn-success btn-sm">Download</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<div class="modal fade" id="uploadModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upload Document</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="uploadForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="file" class="form-label">Select File</label>
                        <input type="file" class="form-control" id="file" name="file"
                            accept=".pdf,.jpg,.jpeg,.png,.webp">
                        <div class="form-text">
                            Supported formats: PDF, JPEG, PNG, WEBP<br>
                            Maximum file size: 20MB<br>
                            Maximum PDF pages: 15
                        </div>
                    </div>
                    <!-- Add status message area -->
                    <div id="uploadStatus" class="alert d-none"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="uploadBtn">Upload</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Your existing popover initialization
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        popoverTriggerList.forEach((triggerEl) => {
            const pop = new bootstrap.Popover(triggerEl, {
                html: true,
                placement: 'auto',
                container: 'body',
                trigger: 'manual'
            });

            triggerEl.addEventListener('mouseenter', () => {
                pop.show();
            });
            triggerEl.addEventListener('mouseleave', () => {
                setTimeout(() => {
                    if (!document.querySelector('.popover:hover')) {
                        pop.hide();
                    }
                }, 200);
            });

            triggerEl.addEventListener('shown.bs.popover', () => {
                const popoverEl = document.querySelector('.popover');
                if (popoverEl) {
                    popoverEl.addEventListener('mouseleave', () => {
                        pop.hide();
                    });
                }
            });
        });

        // Category filter functionality
        const selectAllBtn = document.getElementById('selectAll');
        const clearAllBtn = document.getElementById('clearAll');
        const checkboxes = document.querySelectorAll('.category-checkbox');

        selectAllBtn.addEventListener('click', function () {
            checkboxes.forEach(checkbox => checkbox.checked = true);
        });

        clearAllBtn.addEventListener('click', function () {
            checkboxes.forEach(checkbox => checkbox.checked = false);
        });

        // Check if upload in progress
        if (localStorage.getItem('uploadInProgress') === 'true') {
            document.getElementById('file').disabled = true;
            document.getElementById('uploadBtn').disabled = true;
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        const uploadModal = document.getElementById('uploadModal');
        const uploadForm = document.getElementById('uploadForm');
        const fileInput = document.getElementById('file');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadStatus = document.getElementById('uploadStatus');
        const closeBtn = uploadModal.querySelector('.btn-close');
        const modal = new bootstrap.Modal(uploadModal);
        const progressIndicator = document.createElement('div');
        progressIndicator.className = 'mt-3';

        const maxSize = 20 * 1024 * 1024; // 20MB in bytes
        let isUploading = false; // Track upload state
        let uploadResult = null; // Store upload result

        // Function to show status message
        function showStatus(message, type) {
            uploadStatus.textContent = message;
            uploadStatus.className = `alert alert-${type} mt-3`;
            uploadStatus.classList.remove('d-none');
        }

        // Function to reset form
        function resetForm() {
            if (!isUploading) {  // Only reset if not uploading
                uploadForm.reset();
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = 'Upload';
                uploadStatus.classList.add('d-none');
                uploadResult = null;
                fileInput.disabled = false;
            }
        }

        // Function to update UI based on upload state
        function updateUIState() {
            if (isUploading) {
                uploadBtn.disabled = true;
                fileInput.disabled = true;
                uploadBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
                closeBtn.style.display = 'none'; // Hide close button during upload
            } else {
                uploadBtn.disabled = false;
                fileInput.disabled = false;
                uploadBtn.innerHTML = 'Upload';
                closeBtn.style.display = 'block';
            }

            if (uploadResult) {
                showStatus(uploadResult.message, uploadResult.status);
            }
        }

        // File size validation
        fileInput.addEventListener('change', function () {
            const file = this.files[0];

            if (file) {
                if (file.size > maxSize) {
                    showStatus('File size exceeds 20MB limit', 'danger');
                    this.value = '';
                    uploadBtn.disabled = true;
                } else {
                    uploadStatus.classList.add('d-none');
                    uploadBtn.disabled = false;
                }
            }
        });

        // Handle form submission
        uploadForm.addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);

            // Set uploading state
            isUploading = true;
            localStorage.setItem('uploadInProgress', 'true');
            updateUIState();

            if (!uploadBtn.parentNode.contains(progressIndicator)) {
                uploadBtn.parentNode.appendChild(progressIndicator);
            }

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (response.ok) {
                    uploadResult = {
                        status: 'success',
                        message: 'File processed successfully'
                    };

                    // Show flash message only if modal is closed
                    uploadModal.addEventListener('hidden.bs.modal', function handler() {
                        if (uploadResult && uploadResult.status === 'success') {
                            const flashMessage = document.createElement('div');
                            flashMessage.className = 'alert alert-success alert-dismissible fade show';
                            flashMessage.innerHTML = `
                            ${data.message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        `;
                            document.querySelector('.container').insertAdjacentElement('afterbegin', flashMessage);
                        }
                        uploadModal.removeEventListener('hidden.bs.modal', handler);
                    }, { once: true });

                    // Close modal after delay if still open
                    setTimeout(() => {
                        if (uploadModal.classList.contains('show')) {
                            modal.hide();
                        }
                    }, 2000);
                } else {
                    uploadResult = {
                        status: 'danger',
                        message: data.message || 'Upload failed'
                    };
                }
            } catch (error) {
                uploadResult = {
                    status: 'danger',
                    message: 'Error uploading file'
                };
            } finally {
                isUploading = false;
                localStorage.setItem('uploadInProgress', 'false');
                updateUIState();
            }
        });

        // Modal event handlers
        uploadModal.addEventListener('show.bs.modal', function () {
            updateUIState();  // Restore state when modal opens
        });

        uploadModal.addEventListener('hidden.bs.modal', function () {
            if (!isUploading) {  // Only reset if not uploading
                resetForm();
            }
        });
    });
</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

<style>
    .popover {
        max-width: 400px;
    }

    .popover-body {
        max-height: 200px;
        overflow-y: auto;
        white-space: pre-wrap;
    }

    .bi {
        margin-right: 0.25rem;
    }

    th a {
        display: inline-flex;
        align-items: center;
    }

    th a:hover {
        color: #0d6efd !important;
    }

    /* Add some spacing for the filter card */
    .card {
        margin-bottom: 1rem;
    }

    .card-header {
        background-color: #f8f9fa;
    }

    /* Make checkboxes more visible */
    .form-check {
        padding: 0.5rem;
        border-radius: 0.25rem;
    }

    .form-check:hover {
        background-color: #f8f9fa;
    }

    /* Style for the filter buttons */
    .card-header .btn-sm {
        margin-left: 0.5rem;
    }

    .modal-dialog {
        max-width: 500px;
    }

    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
    }
</style>
{% endblock %}
